import telebot
from datetime import datetime, timedelta

TOKEN = ".................."
bot = telebot.TeleBot(TOKEN)

user_data = {}

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_data[chat_id] = {"step": "ask_age"}
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –Ø SmartDay Bot ü§ñ\n–î–∞–≤–∞–π —Å–æ—Å—Ç–∞–≤–∏–º —Ç–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å! –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")

@bot.message_handler(func=lambda msg: True)
def handle_message(message):
    chat_id = message.chat.id
    text = message.text
    data = user_data.get(chat_id, {})

    step = data.get("step")

    try:
        if step == "ask_age":
            if text.isdigit():
                data["age"] = int(text)
                data["step"] = "wake_time"
                bot.send_message(chat_id, "–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –æ–±—ã—á–Ω–æ –≤—Å—Ç–∞—ë—à—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7:00)")
            else:
                bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ü–∏—Ñ—Ä–∞–º–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç.")
            return

        if step == "wake_time":
            data["wake_time"] = datetime.strptime(text, "%H:%M")
            data["step"] = "school_leave"
            bot.send_message(chat_id, "–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –∏–¥—ë—à—å –≤ —à–∫–æ–ª—É? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8:00)")
            return

        if step == "school_leave":
            data["school_leave"] = datetime.strptime(text, "%H:%M")
            data["step"] = "school_return"
            bot.send_message(chat_id, "–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –ø—Ä–∏—Ö–æ–¥–∏—à—å –¥–æ–º–æ–π —Å–æ —à–∫–æ–ª—ã? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00)")
            return

        if step == "school_return":
            data["school_return"] = datetime.strptime(text, "%H:%M")
            data["step"] = "sleep_time"
            bot.send_message(chat_id, "–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –ª–æ–∂–∏—à—å—Å—è —Å–ø–∞—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22:30)")
            return

        if step == "sleep_time":
            data["sleep_time"] = datetime.strptime(text, "%H:%M")
            data["step"] = "study_hours"
            bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ö–æ—á–µ—à—å —É–¥–µ–ª—è—Ç—å —É—á–µ–±–µ –¥–æ–º–∞? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2)")
            return

        if step == "study_hours":
            if text.isdigit():
                data["study_hours"] = int(text)
                data["step"] = "sport_hours"
                bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ö–æ—á–µ—à—å —É–¥–µ–ª—è—Ç—å —Å–ø–æ—Ä—Ç—É?")
            else:
                bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ —á–∞—Å–æ–≤.")
            return

        if step == "sport_hours":
            if text.isdigit():
                data["sport_hours"] = int(text)
                data["step"] = "hobby_hours"
                bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ö–æ—á–µ—à—å —É–¥–µ–ª—è—Ç—å —Ö–æ–±–±–∏?")
            else:
                bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ —á–∞—Å–æ–≤.")
            return

        if step == "hobby_hours":
            if text.isdigit():
                data["hobby_hours"] = int(text)
                data["step"] = "rest_hours"
                bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ö–æ—á–µ—à—å –æ—Ç–¥—ã—Ö–∞—Ç—å –¥–æ–º–∞?")
            else:
                bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ —á–∞—Å–æ–≤.")
            return

        if step == "rest_hours":
            if text.isdigit():
                data["rest_hours"] = int(text)
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                schedule = generate_full_schedule(data)
                bot.send_message(chat_id, schedule)
                data["step"] = "done"
            else:
                bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ —á–∞—Å–æ–≤.")
            return

        if step == "done":
            bot.send_message(chat_id, "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å, –Ω–∞–ø–∏—à–∏ /start.")

    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ /start")


def generate_full_schedule(data):
    lines = []

    wake = data["wake_time"]
    school_leave = data["school_leave"]
    school_return = data["school_return"]
    sleep = data["sleep_time"]

    
    lines.append(f"{wake.strftime('%H:%M')} - {(wake + timedelta(minutes=15)).strftime('%H:%M')}: –ü–æ–¥—ä—ë–º –∏ —É–º—ã–≤–∞–Ω–∏–µ")
    lines.append(f"{(wake + timedelta(minutes=15)).strftime('%H:%M')} - {(wake + timedelta(minutes=30)).strftime('%H:%M')}: –ó–∞—Ä—è–¥–∫–∞")
    lines.append(f"{(wake + timedelta(minutes=30)).strftime('%H:%M')} - {school_leave.strftime('%H:%M')}: –ó–∞–≤—Ç—Ä–∞–∫ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∫–æ–ª–µ")

    
    lines.append(f"{school_leave.strftime('%H:%M')} - {school_return.strftime('%H:%M')}: –®–∫–æ–ª–∞")

    
    current = school_return
    # –û—Ç–¥—ã—Ö
    if data["rest_hours"] > 0:
        rest_end = current + timedelta(hours=data["rest_hours"])
        lines.append(f"{current.strftime('%H:%M')} - {rest_end.strftime('%H:%M')}: –û—Ç–¥—ã—Ö –¥–æ–º–∞ (—Å–ª—É—à–∞–π –º—É–∑—ã–∫—É, —Ö–æ–±–±–∏)")
        current = rest_end

    
    if data["study_hours"] > 0:
        study_end = current + timedelta(hours=data["study_hours"])
        lines.append(f"{current.strftime('%H:%M')} - {study_end.strftime('%H:%M')}: –£—á—ë–±–∞ (—É—Ä–æ–∫–∏, –¥–æ–º–∞—à–∫–∏, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)")
        current = study_end

    
    if data["sport_hours"] > 0:
        sport_end = current + timedelta(hours=data["sport_hours"])
        lines.append(f"{current.strftime('%H:%M')} - {sport_end.strftime('%H:%M')}: –°–ø–æ—Ä—Ç / –ø—Ä–æ–≥—É–ª–∫–∞")
        current = sport_end

    
    if data["hobby_hours"] > 0:
        hobby_end = current + timedelta(hours=data["hobby_hours"])
        lines.append(f"{current.strftime('%H:%M')} - {hobby_end.strftime('%H:%M')}: –•–æ–±–±–∏ / —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è")
        current = hobby_end

    
    lines.append(f"{(sleep - timedelta(minutes=60)).strftime('%H:%M')} - {sleep.strftime('%H:%M')}: –£–∂–∏–Ω, –¥—É—à, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ —Å–Ω—É")
    lines.append(f"{sleep.strftime('%H:%M')} - {(sleep + timedelta(hours=0)).strftime('%H:%M')}: –°–æ–Ω")

    lines.append("\nüí° –°–æ–≤–µ—Ç: —á–µ—Ä–µ–¥—É–π —É—á—ë–±—É, –æ—Ç–¥—ã—Ö, —Å–ø–æ—Ä—Ç –∏ —Ö–æ–±–±–∏. –î–µ–ª–∞–π –ø–µ—Ä–µ—Ä—ã–≤—ã –∫–∞–∂–¥—ã–µ 1-2 —á–∞—Å–∞.")

    return "\n".join(lines)

bot.polling(none_stop=True, timeout=100)
